---
# yaml-language-server: $schema=https://json.schemastore.org/drone.json

kind: pipeline
type: docker
name: CI-CD
trigger:
  branch:
    - master
  event:
    - push
    - custom
    - tag
    - cron
    - promote
    - rollback
    - pull_request

services:
  - name: postgres-db
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: music-gang-ci-test

  - name: redis-db
    image: redis
    environment:
      ALLOW_EMPTY_PASSWORD: yes

steps:
  # TESTING
  - name: test
    image: golang:1.18
    commands:
      - sleep 15
      - export $(cat drone-ci/.drone.env | xargs)
      - go test ./... -timeout 120s -race -coverprofile=coverage.txt -covermode=atomic

  # BUILD AND RUN
  - name: build-and-run
    image: golang:1.18
    detach: true
    commands:
      - go build -o mg-api cmd/main.go
      - export $(cat drone-ci/.drone.env | xargs)
      - ./mg-api

  # FLOW TESTING
  - name: flow-test
    image: ruby:2.7
    environment:
      MUSICGANG_SERVICE_URL: build-and-run:8888/v1
    commands:
      - gem install bundler:2.2.29
      - cd tests
      - bundle install
      - sleep 10
      - while ! curl -m 60 --retry 10 build-and-run:8888; do sleep 1; done
      - bundle exec rspec --format doc

  # # TAGGED DOCKER IMAGE BUILD
  # - name: publish-docker-image
  #   image: plugins/docker
  #   when:
  #     event:
  #       - tag
  #   settings:
  #     repo:
  #       from_secret: docker_repo
  #     tags:
  #       - latest
  #       - ${DRONE_TAG}
  #     username:
  #       from_secret: docker_username
  #     password:
  #       from_secret: docker_password

  # # DEVELOPMENT DOCKER IMAGE BUILD
  # - name: publish-docker-image-development
  #   image: plugins/docker
  #   when:
  #     event:
  #       - promote
  #       - rollback
  #     target:
  #       exclude:
  #         - production
  #         - staging
  #   settings:
  #     repo:
  #       from_secret: docker_repo
  #     tags:
  #       - latest
  #       - ${DRONE_DEPLOY_TO}-${DRONE_BUILD_NUMBER}
  #     username:
  #       from_secret: docker_username
  #     password:
  #       from_secret: docker_password

  # # NIGHTLY BUILD
  # - name: nightly-docker-image
  #   image: plugins/docker
  #   when:
  #     event:
  #       - cron
  #   settings:
  #     repo:
  #       from_secret: docker_repo
  #     tags:
  #       - latest
  #     username:
  #       from_secret: docker_username
  #     password:
  #       from_secret: docker_password

  # # UPDATE PROD MANIFEST
  # - name: update-manifest-prod
  #   image: minghsu0107/update-kustomization:v1.0.3
  #   environment:
  #     SSH_KEY:
  #       from_secret: ssh_key
  #     IMAGES: iacopomelani/music-gang-api
  #     IMAGE_TAG: ${DRONE_TAG}
  #     MANIFEST_HOST: github.com
  #     MANIFEST_USER: music-gang
  #     MANIFEST_REPO: music-gang-api-manifest
  #     MANIFEST_BRANCH: master
  #     KUSTOMIZATION: overlays/prod
  #   when:
  #     event:
  #       - promote
  #       - rollback
  #     target:
  #       - production

  # # UPDATE STAGING MANIFEST
  # - name: update-manifest-staging
  #   image: minghsu0107/update-kustomization:v1.0.3
  #   environment:
  #     SSH_KEY:
  #       from_secret: ssh_key
  #     IMAGES: iacopomelani/music-gang-api
  #     IMAGE_TAG: ${DRONE_TAG}
  #     MANIFEST_HOST: github.com
  #     MANIFEST_USER: music-gang
  #     MANIFEST_REPO: music-gang-api-manifest
  #     MANIFEST_BRANCH: master
  #     KUSTOMIZATION: overlays/stage
  #   when:
  #     event:
  #       - promote
  #       - rollback
  #     target:
  #       - staging

  # # UPDATE DEV MANIFEST
  # - name: update-manifest-dev-${DRONE_DEPLOY_TO}
  #   image: minghsu0107/update-kustomization:v1.0.3
  #   environment:
  #     SSH_KEY:
  #       from_secret: ssh_key
  #     IMAGES: iacopomelani/music-gang-api
  #     IMAGE_TAG: ${DRONE_DEPLOY_TO}-${DRONE_BUILD_NUMBER}
  #     MANIFEST_HOST: github.com
  #     MANIFEST_USER: music-gang
  #     MANIFEST_REPO: music-gang-api-manifest
  #     MANIFEST_BRANCH: master
  #     KUSTOMIZATION: overlays/dev/${DRONE_DEPLOY_TO}
  #   when:
  #     event:
  #       - promote
  #       - rollback
  #     target:
  #       - mercury

  # SLACK NOTIFICATIONS
  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: slack_webhook
      channel: drone-ci
      username: drone
      icon_url: https://avatars.githubusercontent.com/u/2181346?s=200&v=4
      template: >
        {{#success build.status}}
          build {{build.number}} succeeded. Good job.
        {{else}}
          build {{build.number}} failed. Fix me please.
        {{/success}}
    when:
      event:
        exclude:
          - pull_request
      status:
        - failure
        - success
---
kind: signature
hmac: 11e0f931cb921dad393b1c2010654e25f3e5d32e70a7a69c322157537b6875d1
